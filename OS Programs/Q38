#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100
#define MAX_CYLINDERS 10000

// Function to simulate SCAN disk scheduling
void scan(int requests[], int num_requests, int head, int direction, int max_cylinder) {
    int total_movement = 0;
    int i, j;

    // Sort the requests array
    for (i = 0; i < num_requests - 1; i++) {
        for (j = 0; j < num_requests - i - 1; j++) {
            if ((direction == 1 && requests[j] > requests[j + 1]) || (direction == -1 && requests[j] < requests[j + 1])) {
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }

    printf("Sequence of disk head movement:\n");
    printf("%d", head);

    // Move head to the end or beginning depending on direction
    if (direction == 1) {
        printf(" -> %d", max_cylinder);
        total_movement += abs(head - max_cylinder);
        head = max_cylinder;
    } else {
        printf(" -> 0");
        total_movement += head;
        head = 0;
    }

    // Service requests in the current direction
    for (i = 0; i < num_requests; i++) {
        if ((direction == 1 && requests[i] > head) || (direction == -1 && requests[i] < head)) {
            printf(" -> %d", requests[i]);
            total_movement += abs(head - requests[i]);
            head = requests[i];
        }
    }

    printf("\nTotal head movement: %d\n", total_movement);
}

int main() {
    int requests[MAX_REQUESTS];
    int num_requests, head, max_cylinder, direction;

    printf("Enter the current position of the disk head: ");
    scanf("%d", &head);

    printf("Enter the maximum cylinder number of the disk: ");
    scanf("%d", &max_cylinder);

    printf("Enter the direction of movement (1 for right, -1 for left): ");
    scanf("%d", &direction);

    printf("Enter the number of disk access requests: ");
    scanf("%d", &num_requests);

    printf("Enter the disk access requests: ");
    for (int i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }

    scan(requests, num_requests, head, direction, max_cylinder);

    return 0;
}
